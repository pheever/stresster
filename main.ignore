package main

import (
	"fmt"
	"reflect"

	"gopkg.in/yaml.v3"
)

type Base struct {
	Foo string `yaml:"foo"`
}

var a TypeA

type TypeA struct {
	Base  `yaml:",inline"`
	TypeA struct {
		Bar *int `yaml:"bar,omitempty"`
	} `yaml:"typea"`
}

var test1 = []byte(`---
foo: test1 test
typea:
  bar: 123
`)
var b TypeB

type TypeB struct {
	Base  `yaml:",inline"`
	TypeB struct {
		Baz string `yaml:"baz"`
	} `yaml:"typeb"`
}

var test2 = []byte(`---
foo: is this a test??
typeb:
  baz: true
`)

func main() {
	// t := identifyType(test1)
	// fmt.Println((t))
	// t = identifyType(test2)
	// fmt.Println((t))

	a := &TypeA{}
	var b interface{}
	b = a
	fmt.Println(reflect.ValueOf(b).Type())

	t := identifyType(test1)
	fmt.Println(t)
	fmt.Println(reflect.ValueOf(t).Type())
	t = identifyType(test2)
	fmt.Println(t)
	fmt.Println(reflect.ValueOf(t).Type())
	// var a TypeA
	// aa := *t.(TypeB)
	// fmt.Println(aa)

}

//needs to be built at runtime
var types = map[string]reflect.Type{
	"typea": reflect.ValueOf(a).Type(),
	"typeb": reflect.ValueOf(b).Type(),
}

func identifyType(data []byte) interface{} {
	var raw map[string]interface{}
	err := yaml.Unmarshal(data, &raw)
	if err != nil {
		panic(err)
	}
	for k := range types {
		if _, ok := raw[k]; ok {
			v := reflect.New(types[k]).Interface()
			if e := yaml.Unmarshal(data, v); e != nil {
				panic(e)
			}
			return v
		}
	}
	//error: could not determine type
	return nil
}
